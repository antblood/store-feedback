// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: store_feedback.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreFeedbackClient is the client API for StoreFeedback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreFeedbackClient interface {
	GetAllFeedbacks(ctx context.Context, in *GetAllFeedbacksRequest, opts ...grpc.CallOption) (*GetAllFeedbacksResponse, error)
}

type storeFeedbackClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreFeedbackClient(cc grpc.ClientConnInterface) StoreFeedbackClient {
	return &storeFeedbackClient{cc}
}

func (c *storeFeedbackClient) GetAllFeedbacks(ctx context.Context, in *GetAllFeedbacksRequest, opts ...grpc.CallOption) (*GetAllFeedbacksResponse, error) {
	out := new(GetAllFeedbacksResponse)
	err := c.cc.Invoke(ctx, "/store_feedback.StoreFeedback/GetAllFeedbacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreFeedbackServer is the server API for StoreFeedback service.
// All implementations must embed UnimplementedStoreFeedbackServer
// for forward compatibility
type StoreFeedbackServer interface {
	GetAllFeedbacks(context.Context, *GetAllFeedbacksRequest) (*GetAllFeedbacksResponse, error)
	mustEmbedUnimplementedStoreFeedbackServer()
}

// UnimplementedStoreFeedbackServer must be embedded to have forward compatible implementations.
type UnimplementedStoreFeedbackServer struct {
}

func (UnimplementedStoreFeedbackServer) GetAllFeedbacks(context.Context, *GetAllFeedbacksRequest) (*GetAllFeedbacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFeedbacks not implemented")
}
func (UnimplementedStoreFeedbackServer) mustEmbedUnimplementedStoreFeedbackServer() {}

// UnsafeStoreFeedbackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreFeedbackServer will
// result in compilation errors.
type UnsafeStoreFeedbackServer interface {
	mustEmbedUnimplementedStoreFeedbackServer()
}

func RegisterStoreFeedbackServer(s grpc.ServiceRegistrar, srv StoreFeedbackServer) {
	s.RegisterService(&StoreFeedback_ServiceDesc, srv)
}

func _StoreFeedback_GetAllFeedbacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFeedbacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreFeedbackServer).GetAllFeedbacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store_feedback.StoreFeedback/GetAllFeedbacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreFeedbackServer).GetAllFeedbacks(ctx, req.(*GetAllFeedbacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreFeedback_ServiceDesc is the grpc.ServiceDesc for StoreFeedback service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreFeedback_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store_feedback.StoreFeedback",
	HandlerType: (*StoreFeedbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllFeedbacks",
			Handler:    _StoreFeedback_GetAllFeedbacks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store_feedback.proto",
}
